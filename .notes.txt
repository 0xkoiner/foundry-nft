anvil::ChainID 31337

```bash
Foundry::forge init
Foundry::forge compile

// Deploy Contract on Anvil
Foundry::forge create `contract-name` --rpc-url [url] --private-key [private-key]

// Fromat code
Foundry::forge fmt

// Install Chainlink Pack
forge install smartcontractkit/chainlink-brownie-contracts
```

// Create a Script
./script -> [Name].s.sol

// Deploy Contract with Script
```bash
forge script script/DeploySimpleStorage.s.sol --rpc-url [url] --broadcast --private-key [private-key]
```

// Deploy Contract with Script and .env
```bash
forge script script/DeploySimpleStorage.s.sol --rpc-url $ANVIL_RPC_URL --broadcast --private-key $PPRIVATE_KEY
```

// Hex to Dec
```bash
cast --to-base [hex] dec
```

// Encryt keys with ERC-2335 to JSON
```bash
cast wallet import defauktKey --interactive
```
1. Enter key
2. Enter Password

Res: Address
```bash
forge script script/DeploySimpleStorage.s.sol --rpc-url $RPC_URL_ANVIL --account defaultKey --sender [Res: Address] --broadcast -vvvv

// Legacy
forge script script/DeploySimpleStorage.s.sol --rpc-url $RPC_URL_ANVIL --account defaultKey --sender [Res: Address] --legacy --broadcast -vvvv

```
L_ Enter Password: _

```bash
cast wallet list
```

```bash
cd .foundry/keystores/
```
// Cast SEND TX 0x5FbDB2315678afecb367f032d93F642f64180aa3
```bash
cast send [contract address] "[name of function with @params]" [args] --rpc-url $RPC_URL_ANVIL --private-key $PRIVATE_KEY_1
```

// Cast Call
```bash
cast call 0x5FbDB2315678afecb367f032d93F642f64180aa3 "retrieve()"
```

// Run test for specific testfunc() include fork
```bash
forge test --mt [func_name] -vvvv --fork-url $SEPOLIA_RPC_URL
forge test --mt -vvvv --fork-url $SEPOLIA_RPC_URL 
```

// Test coverage include fork
```bash
forge coverage --fork-url $SEPOLIA_RPC_URL  
```

// Check Gas of one function
```bash
forge snapshot --mt [func_name]
```
export -> .gas-snapshot -> FundMeTest:testWithdrawOwnerFromMultiUsersFunded() (gas: 515047)

// Check Storage of Contract
```bash
forge inspect [contract_name] storageLayout
```
export -> JSON

// Cast check Storage After script Deploy
```bash
cast storage [deplyed_contract_address] [slot]
```

// Cast to get Hex of function
```bash
cast sig ["func_name"]
```
export -> 0x4e71d92d

// CEI: Checks, Effects Iteractions Pattern

// CRON
*****
*m*h*d*m*dof
*/1**** --> every 1 minute
*1**** --> every first minute of the hour
**/1*** --> every 1 hour


// base64 make SVG code to base64
```base
base64 -i [svg file path]
```

happy:
data:image/svg+xml;base64,
PHN2ZyB2aWV3Qm94PSIwIDAgMjAwIDIwMCIgd2lkdGg9IjQwMCIgIGhlaWdodD0iNDAwIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgogIDxjaXJjbGUgY3g9IjEwMCIgY3k9IjEwMCIgZmlsbD0ieWVsbG93IiByPSI3OCIgc3Ryb2tlPSJibGFjayIgc3Ryb2tlLXdpZHRoPSIzIi8+CiAgPGcgY2xhc3M9ImV5ZXMiPgogICAgPGNpcmNsZSBjeD0iNzAiIGN5PSI4MiIgcj0iMTIiLz4KICAgIDxjaXJjbGUgY3g9IjEyNyIgY3k9IjgyIiByPSIxMiIvPgogIDwvZz4KICA8cGF0aCBkPSJtMTM2LjgxIDExNi41M2MuNjkgMjYuMTctNjQuMTEgNDItODEuNTItLjczIiBzdHlsZT0iZmlsbDpub25lOyBzdHJva2U6IGJsYWNrOyBzdHJva2Utd2lkdGg6IDM7Ii8+Cjwvc3ZnPg==

sad:
data:image/svg+xml;base64,
PHN2ZyB3aWR0aD0iMTAyNHB4IiBoZWlnaHQ9IjEwMjRweCIgdmlld0JveD0iMCAwIDEwMjQgMTAyNCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KICA8cGF0aCBmaWxsPSIjMzMzIiBkPSJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTAgODIwYy0yMDUuNCAwLTM3Mi0xNjYuNi0zNzItMzcyczE2Ni42LTM3MiAzNzItMzcyIDM3MiAxNjYuNiAzNzIgMzcyLTE2Ni42IDM3Mi0zNzIgMzcyeiIvPgogIDxwYXRoIGZpbGw9IiNFNkU2RTYiIGQ9Ik01MTIgMTQwYy0yMDUuNCAwLTM3MiAxNjYuNi0zNzIgMzcyczE2Ni42IDM3MiAzNzIgMzcyIDM3Mi0xNjYuNiAzNzItMzcyLTE2Ni42LTM3Mi0zNzItMzcyek0yODggNDIxYTQ4LjAxIDQ4LjAxIDAgMCAxIDk2IDAgNDguMDEgNDguMDEgMCAwIDEtOTYgMHptMzc2IDI3MmgtNDguMWMtNC4yIDAtNy44LTMuMi04LjEtNy40QzYwNCA2MzYuMSA1NjIuNSA1OTcgNTEyIDU5N3MtOTIuMSAzOS4xLTk1LjggODguNmMtLjMgNC4yLTMuOSA3LjQtOC4xIDcuNEgzNjBhOCA4IDAgMCAxLTgtOC40YzQuNC04NC4zIDc0LjUtMTUxLjYgMTYwLTE1MS42czE1NS42IDY3LjMgMTYwIDE1MS42YTggOCAwIDAgMS04IDguNHptMjQtMjI0YTQ4LjAxIDQ4LjAxIDAgMCAxIDAtOTYgNDguMDEgNDguMDEgMCAwIDEgMCA5NnoiLz4KICA8cGF0aCBmaWxsPSIjMzMzIiBkPSJNMjg4IDQyMWE0OCA0OCAwIDEgMCA5NiAwIDQ4IDQ4IDAgMSAwLTk2IDB6bTIyNCAxMTJjLTg1LjUgMC0xNTUuNiA2Ny4zLTE2MCAxNTEuNmE4IDggMCAwIDAgOCA4LjRoNDguMWM0LjIgMCA3LjgtMy4yIDguMS03LjQgMy43LTQ5LjUgNDUuMy04OC42IDk1LjgtODguNnM5MiAzOS4xIDk1LjggODguNmMuMyA0LjIgMy45IDcuNCA4LjEgNy40SDY2NGE4IDggMCAwIDAgOC04LjRDNjY3LjYgNjAwLjMgNTk3LjUgNTMzIDUxMiA1MzN6bTEyOC0xMTJhNDggNDggMCAxIDAgOTYgMCA0OCA0OCAwIDEgMC05NiAweiIvPgo8L3N2Zz4=

// Create Text with string
```solidity
        string memory tokenMetadata = string.concat(
            '{"name": "',
            name(),
            '", "description": "An NFT shows and owners mood.", "attributes:" [{trait_type: "moodiness", "value": 100}], "image": "',
            _imageURI,
            '"}'
        );
```